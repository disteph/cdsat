# OASIS_START
# DO NOT EDIT (digest: 47e832d2694562e538a87a2482440385)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Executable psyche
<src/main.{native,byte}>: pkg_async
<src/main.{native,byte}>: pkg_ppx_deriving.std
<src/main.{native,byte}>: pkg_ppx_hash
<src/main.{native,byte}>: pkg_threads
<src/*.ml{,i,y}>: pkg_async
<src/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/*.ml{,i,y}>: pkg_ppx_hash
<src/*.ml{,i,y}>: pkg_threads
# OASIS_STOP

<src> or <src/lib> or <src/portfolio> or <src/specs> or <src/top-level>: include

<src/kernel/top/*.cmx>           : for-pack(Kernel.Top)

<src/kernel/theories/prop/*>     : for-pack(Kernel.Prop)
<src/kernel/theories/empty/*>    : for-pack(Kernel.Empty)
<src/kernel/theories/arrays/*>    : for-pack(Kernel.Arrays)
<src/kernel/theories/dejan/*>    : for-pack(Kernel.Dejan)
<src/kernel/theories/CC/*>       : for-pack(Kernel.CC)
<src/kernel/theories/FirstOrder/*>    : for-pack(Kernel.FirstOrder)
<src/kernel/theories/IfThenElse/*>    : for-pack(Kernel.IfThenElse)
<src/kernel/theories/bool/*>     : for-pack(Kernel.Bool)

<src/kernel/*.cmx>               : for-pack(Kernel)
<src/kernel/theories/*.cmx>      : for-pack(Kernel)

<src/kernel/parsers/*.cmx>       : for-pack(Kernel.Parsers)
<src/kernel/parsers/SMTLib2_tools/*>: for-pack(Kernel.Parsers.SMTLib2_tools)

<src/lib/general/*.cmx>:              for-pack(General)
<src/lib/pluginsG_tools/*.cmx>:       for-pack(PluginsG_tools)
<src/lib/pluginsTh_tools/*.cmx>:      for-pack(PluginsTh_tools)

<src/portfolio/plugins/*.cmx>:        for-pack(Plugins)

<src/portfolio/pluginsG/*.cmx>:       for-pack(PluginsG)
<src/portfolio/pluginsG/DPLL_Pat/*.cmx>:        for-pack(PluginsG.DPLL_Pat)
<src/portfolio/pluginsG/DPLL_WL/*.cmx>:         for-pack(PluginsG.DPLL_WL)
<src/portfolio/pluginsG/DPLL/*.cmx>:            for-pack(PluginsG.DPLL)
<src/portfolio/pluginsG/Naive/*.cmx>:           for-pack(PluginsG.Naive)
<src/portfolio/pluginsG/RestartsFunctor/*.cmx>: for-pack(PluginsG.RestartsFunctor)
<src/portfolio/pluginsG/Hint/*.cmx>:            for-pack(PluginsG.Hint)

<src/portfolio/pluginsTh/*.cmx>:      for-pack(PluginsTh)

<src/*.{byte,native}>:                 use_str
<src/portfolio/plugins/**/*.ml{,i,y}>: thread, pkg_async

<src/main.ml{,i,y}>:   open(Open)
<src/*/**/*.ml{,i,y}>: open(Open)

<src/**/*.ml{,i,y}>: pkg_ppx_deriving.std, pkg_ppx_hash

true: debug
